# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 6 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Debug, latest MSVC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 5. <Linux, Release, clang-17 compiler toolchain, default generator>
      # 6. <Linux, Debug, clang-17 compiler toolchain, default generator>
      # 7. <MacOS, Release, latest Apple Clang compiler toolchain on the default runner image, default generator>
      # 8. <MacOS, Debug, latest Apple Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
        build_type: [Release, Debug]
        c_compiler: [gcc, cl, clang, clang-17]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang-17
            cpp_compiler: clang++-17
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            c_compiler: clang-17
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc
          - os: macos-14
            c_compiler: clang-17

    steps:
    - uses: actions/checkout@v4

    - name: Install clang-17
      if: matrix.os=='ubuntu-latest' && matrix.c_compiler=='clang-17'
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo apt-add-repository deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main
        sudo apt-add-repository deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main
        sudo apt-get update
        sudo apt-get install -y clang-17
        sudo apt-get install --no-install-recommends -y libc++-17-dev libc++abi-17-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Unit Tests on Ubuntu
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/testbpatch/
      run: ./testbpatch

    - name: Unit Tests on Mac
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='macos-14'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/testbpatch/
      run: ./testbpatch

    - name: Unit Tests on Windows
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='windows-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/testbpatch/${{ matrix.build_type }}/
      shell: cmd
      run: .\testbpatch.exe

    - name: Integration Tests on Ubuntu
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='ubuntu-latest'
      run: |
        chmod +x IntegrationTests/in_tests.sh
        ./IntegrationTests/in_tests.sh ${{ steps.strings.outputs.build-output-dir }}/bpatch

    - name: Integration Tests on Mac
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='macos-14'
      run: |
        chmod +x IntegrationTests/in_tests.sh
        ./IntegrationTests/in_tests.sh ${{ steps.strings.outputs.build-output-dir }}/bpatch

    - name: Integration Tests on Windows
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: matrix.os=='windows-latest'
      shell: cmd
      run: ./IntegrationTests/in_tests.cmd ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/bpatch.exe

